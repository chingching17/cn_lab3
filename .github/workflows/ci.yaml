name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install
      working-directory: ./backend

    - name: Run tests
      run: npm run test
      working-directory: ./backend

    - name: Generate new coverage report
      run: npm run coverage > coverage_report.txt
      working-directory: ./backend

    - name: Upload new coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ./backend/coverage_report.txt
    
    - name: Reset to previous commit to get coverage report
      run: |
        git reset --hard HEAD~1 
      working-directory: ./backend

    - name: Run tests for previous commit
      run: npm run test
      working-directory: ./backend

    - name: Generate previous coverage report
      run: npm run coverage > coverage_report.txt
      working-directory: ./backend

    - name: Download new coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
        path: ./backend/new_coverage

    - name: Compare previous and new coverage reports
      run: |
        python -c "
          import re
          import chardet

          def get_coverage_metrics(file_path):
              with open(file_path, 'rb') as file:
                  raw_data = file.read()
                  result = chardet.detect(raw_data)
                  encoding = result['encoding']
                  
                  content = raw_data.decode(encoding)
                  # Adjusted regex to match the table header and extract the relevant percentages
                  match = re.search(r"All files\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)", content)
                  if match:
                      return list(map(float, match.groups()))
              return []

          def compare_coverage_reports(report1, report2):
              metrics1 = get_coverage_metrics(report1)
              metrics2 = get_coverage_metrics(report2)

              print(f"Metrics Report 1: {metrics1}")
              print(f"Metrics Report 2: {metrics2}")

              if all(m2 >= m1 for m1, m2 in zip(metrics1, metrics2)):
                  if any(m2 > m1 for m1, m2 in zip(metrics1, metrics2)):
                      print("Coverage improvement detected!")
                  else:
                      print("Coverage remains the same.")
              else:
                  print("Coverage deterioration detected!")
                  exit(1)

          report1 = "./backend/coverage_report.txt"
          report2 = "./backend/new_coverage/coverage_report.txt"

          compare_coverage_reports(report1, report2)

        "
        # report1="./backend/coverage_report.txt"
        # report2="./backend/new_coverage/coverage_report.txt"

        # get_coverage_metrics() {
        #   grep -E "\| % Stmts \| % Branch \| % Funcs \| % Lines" "$1" | awk '{print $3, $5, $7, $9}'
        # }

        # compare_coverage_reports() {
        #   metrics1=$(get_coverage_metrics "$1")
        #   metrics2=$(get_coverage_metrics "$2")

        #   echo "Metrics Report 1: $metrics1"
        #   echo "Metrics Report 2: $metrics2"

        #   # Convert metrics to arrays and remove '%' signs
        #   metrics1_array=($(echo "$metrics1" | tr -d '%' | tr '|' ' ' | awk '{print $1, $2, $3, $4}'))
        #   metrics2_array=($(echo "$metrics2" | tr -d '%' | tr '|' ' ' | awk '{print $1, $2, $3, $4}'))

        #   improvements=("Statements" "Branches" "Functions" "Lines")

        #   for i in {0..3}; do
        #     metric1=${metrics1_array[$i]}
        #     metric2=${metrics2_array[$i]}

        #     if (( $(echo "$metric2 > $metric1" | bc -l) )); then
        #       echo "${improvements[$i]} coverage improvement detected!"
        #     elif (( $(echo "$metric2 == $metric1" | bc -l) )); then
        #       echo "${improvements[$i]} coverage remains the same."
        #     else
        #       echo "${improvements[$i]} coverage deterioration detected!"
        #       exit 1
        #     fi
        #   done
        # }

        # compare_coverage_reports "$report1" "$report2"

  
    - name: Reset to current commit
      run: |
        echo $GITHUB_SHA
        git reset --hard $GITHUB_SHA
    
    # - name: Check code formatting
    #   run: npm run format:check
    #   working-directory: ./backend

    # - name: Format code
    #   if: failure()
    #   run: npm run format
    #   working-directory: ./backend

    # - name: Commit formatted code
    #   if: failure()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
    #   run: |
    #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
    #     git config --local user.name "github-actions[bot]"
    #     git commit -am "style: auto format code"
    #     git push
