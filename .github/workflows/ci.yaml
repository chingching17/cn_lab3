name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install
      working-directory: ./backend

    - name: Run tests
      run: npm run test
      working-directory: ./backend

    - name: Generate new coverage report
      run: npm run coverage > coverage_report.txt
      working-directory: ./backend

    - name: Upload new coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ./backend/coverage_report.txt
    
    - name: Reset to previous commit to get coverage report
      run: |
        git reset --hard HEAD~1 
      working-directory: ./backend

    - name: Run tests for previous commit
      run: npm run test
      working-directory: ./backend

    - name: Generate previous coverage report
      run: npm run coverage > coverage_report.txt
      working-directory: ./backend

    - name: Download new coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
        path: ./backend/new_coverage

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install chardet

    - name: Compare previous and new coverage reports
      run: |
        python <<EOF
        import re
        import chardet

        def get_coverage_metrics(file_path):
            with open(file_path, 'rb') as file:
                raw_data = file.read()
                result = chardet.detect(raw_data)
                encoding = result['encoding']
                
                content = raw_data.decode(encoding)
                # Adjusted regex to match the table header and extract the relevant percentages
                match = re.search(r"All files\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)\s*\|\s*([\d\.]+)", content)
                if match:
                    return list(map(float, match.groups()))
            return []

        def compare_coverage_reports(report1, report2):
            metrics1 = get_coverage_metrics(report1)
            metrics2 = get_coverage_metrics(report2)

            print(f"Metrics Report 1: {metrics1}")
            print(f"Metrics Report 2: {metrics2}")

            if all(m2 >= m1 for m1, m2 in zip(metrics1, metrics2)):
                if any(m2 > m1 for m1, m2 in zip(metrics1, metrics2)):
                    print("Coverage improvement detected!")
                else:
                    print("Coverage remains the same.")
            else:
                print("Coverage deterioration detected!")
                exit(1)

        report1 = "./backend/coverage_report.txt"
        report2 = "./backend/new_coverage/coverage_report.txt"

        compare_coverage_reports(report1, report2)
        EOF

    - name: Reset to current commit
      run: |
        echo $GITHUB_SHA
        git reset --hard $GITHUB_SHA

    - name: Set up Formatting tools
      run: npm install --save-dev prettier

    - name: Check and format code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx prettier --check "./backend/src/**/*.ts" "./frontend/src/**/*.ts" "./backend/*.ts" "./backend/test/*.ts"|| (
          echo "Unformat files are found. Files are formatting..."
          npx prettier --write "./backend/src/**/*.ts" "./frontend/src/**/*.ts" "./backend/*.ts" "./backend/test/*.ts"
          
          echo "Formatting done. Committing changes..."
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Formatted code with Prettier"
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" 
        )
    
